// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview

// Input device configuration.
// https://github.com/YaLTeR/niri/wiki/Configuration:-Input
input {
  keyboard {
    xkb {
      layout "be"
    }
  }

  touchpad {
    tap
    dwt
    drag-lock
    natural-scroll
    accel-speed 0.2
    accel-profile "adaptive"
  }
}

gestures {
  hot-corners {
    off
  }
}


// Cursor configuration
cursor {
  hide-when-typing
  hide-after-inactive-ms 3000
}


// Main display
output "eDP-1" {
    scale 1.2
    variable-refresh-rate on-demand=true
}

environment {
  DISPLAY ":0"
}

layout {
  background-color "transparent"
  center-focused-column "never"

  // If you leave the brackets empty, the windows themselves will decide their initial width.
  default-column-width { proportion 0.5; }

  focus-ring {
    active-gradient from="#80c8ff" to="#223366" angle=210 relative-to="workspace-view"
    inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    width 1
  }
  gaps 10
  preset-column-widths {
    proportion 0.5
    proportion 0.66667
  }
}

layer-rule {
  match namespace="^wallpaper$"
  place-within-backdrop true
}

overview {
  zoom 0.5
  workspace-shadow {
    off
  }
}

// Block out mako notifications from screencasts.
layer-rule {
    match namespace="^notifications$"
    block-out-from "screencast"
}

window-rule {
  geometry-corner-radius 0
  clip-to-geometry true
}


// Workspaces
workspace "tty"
workspace "browse"
workspace "3d"
// workspace "docs"
workspace "files"


// Rules per app

window-rule {
  match app-id="com.mitchellh.ghostty"
  match app-id="codium"

  open-on-workspace "tty"
  opacity 0.85
}

window-rule {
  match app-id="firefox"
  open-on-workspace "browse"
}

window-rule {
  match app-id="PrusaSlicer"
  match app-id="OrcaSlicer"
  match app-id="org.openscad."
  match app-id="blender"

  open-on-workspace "3d"
}

window-rule {
  match app-id="anytype"
  open-on-workspace "docs"
}

window-rule {
  match app-id="ONLYOFFICE"
  open-on-workspace "docs"
}

window-rule {
  match app-id="desktop.opencloud.eu."
  open-on-workspace "files"
}

window-rule {
  match app-id="nemo"
  open-on-workspace "files"
}



// window-rule {
//   match title="aerc"
// }












spawn-at-startup "xwayland-satellite"
// spawn-at-startup "dbus-update-activation-environment" "--systemd" "WAYLAND_DISPLAY" "XDG_CURRENT_DESKTOP"

spawn-at-startup "swaybg" "-i" "/etc/nixos/home-manager/themes/wallpapers/20181014-04-Croptic-Karl_Delandsheere.jpg"

spawn-at-startup "swayidle" "-w"

spawn-at-startup "systemctl" "--user" "reset-failed" "waybar.service"

// As udiskie launch waybar itself, let's comment this out for the time being
// spawn-at-startup "waybar"

// Work around for udiskie to start correctly
// @todo find the right way to setup udiskie
spawn-at-startup "systemctl" "--user" "start" "udiskie.service"

// Open startup TUI apps
spawn-at-startup "sh" "-c" "/etc/nixos/home-manager/utils/scripts/startup.sh"

// spawn-at-startup "ghostty"


// No need to get that overlay each time
hotkey-overlay {
  skip-at-startup
}




// No client-side decorations if possible
prefer-no-csd

// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
  // off
}

switch-events {
  lid-close { spawn "notify-send" "-r" "69" "-a" "niri" "laptop lid closed" "-t" "888" "-u" "low"; }
  lid-open { spawn "notify-send" "-r" "69" "-a" "niri" "laptop lid open" "-t" "888" "-u" "low"; }
}


binds {
  // You can also use a shell. Do this if you need pipes, multiple commands, etc.
  // Note: the entire command goes as a single argument in the end.
  // Mod+T { spawn "bash" "-c" "notify-send hello && exec alacritty"; }


  // Launch some programs
  Mod+T { spawn "ghostty"; }
  Mod+Space { spawn "fuzzel"; }
  Mod+Tab repeat=false { toggle-overview; }

  // Control the monitor brightness
  XF86MonBrightnessUp   allow-when-locked=true { spawn "brightnessctl" "set" "10%+"; }
  XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "set" "10%-"; }


  // Example volume keys mappings for PipeWire & WirePlumber.
  // The allow-when-locked=true property makes them work even when the session is locked.
  XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "5%+"; }
  XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "5%-"; }
  XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
  // XF86AudioRaiseVolume allow-when-locked=true { spawn "pamixer" "-i" "5" "--allow-boost"; }
  // XF86AudioLowerVolume allow-when-locked=true { spawn "pamixer" "-d" "5" "--allow-boost"; }
  // XF86AudioMute        allow-when-locked=true { spawn "pamixer" "-t"; }
  // XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

  // Similarly, you can bind touchpad scroll "ticks".
  // Touchpad scrolling is continuous, so for these binds it is split into
  // discrete intervals.
  // These binds are also affected by touchpad's natural-scroll, so these
  // example binds are "inverted", since we have natural-scroll enabled for
  // touchpads by default.
  // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
  // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }



  Mod+Left       { focus-column-left; }
  Mod+Down       { focus-window-down; }
  Mod+Up         { focus-window-up; }
  Mod+Right      { focus-column-right; }
  Mod+Home       { focus-column-first; }
  Mod+End        { focus-column-last; }

  Mod+Ctrl+Left  { move-column-left; }
  Mod+Ctrl+Down  { move-window-down; }
  Mod+Ctrl+Up    { move-window-up; }
  Mod+Ctrl+Right { move-column-right; }
  Mod+Ctrl+Home  { move-column-to-first; }
  Mod+Ctrl+End   { move-column-to-last; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }


  Mod+Shift+Left  { focus-monitor-left; }
  Mod+Shift+Down  { focus-monitor-down; }
  Mod+Shift+Up    { focus-monitor-up; }
  Mod+Shift+Right { focus-monitor-right; }
  Mod+Shift+H     { focus-monitor-left; }
  Mod+Shift+J     { focus-monitor-down; }
  Mod+Shift+K     { focus-monitor-up; }
  Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    Mod+U              { focus-workspace-down; }
    Mod+I              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }


    // Center focused column
    Mod+C { center-column; }




  // Switches focus between the current and the previous workspace.
  // Mod+Tab { focus-workspace-previous; }


  // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
  // will all refer to the 3rd workspace.
  // Mod+1 { focus-workspace 1; }
  // Mod+2 { focus-workspace 2; }
  // Mod+3 { focus-workspace 3; }
  // Mod+4 { focus-workspace 4; }
  // Mod+5 { focus-workspace 5; }
  // Mod+6 { focus-workspace 6; }
  // Mod+7 { focus-workspace 7; }
  // Mod+8 { focus-workspace 8; }
  // Mod+9 { focus-workspace 9; }
  // Mod+Ctrl+1 { move-column-to-workspace 1; }
  // Mod+Ctrl+2 { move-column-to-workspace 2; }
  // Mod+Ctrl+3 { move-column-to-workspace 3; }
  // Mod+Ctrl+4 { move-column-to-workspace 4; }
  // Mod+Ctrl+5 { move-column-to-workspace 5; }
  // Mod+Ctrl+6 { move-column-to-workspace 6; }
  // Mod+Ctrl+7 { move-column-to-workspace 7; }
  // Mod+Ctrl+8 { move-column-to-workspace 8; }
  // Mod+Ctrl+9 { move-column-to-workspace 9; }

  // Alternatively, there are commands to move just a single window:
  // Mod+Ctrl+1 { move-window-to-workspace 1; }


  // Merge the next window into the focused column or expel the last window from it
  Mod+Comma  { consume-window-into-column; }
  Mod+Semicolon { expel-window-from-column; }


  // Change the width of the focused column/window
  Mod+R { switch-preset-column-width; }
  Mod+Minus { set-column-width "-10%"; }
  Mod+Equal { set-column-width "+10%"; }
  Mod+F { maximize-column; }
  Mod+Shift+F { fullscreen-window; }

  Mod+Shift+Minus { set-window-height "-10%"; }
  Mod+Shift+Equal { set-window-height "+10%"; }

  // Toggle floating and move the focused window between floating and tiling
  Mod+V       { toggle-window-floating; }
  Mod+Shift+V { switch-focus-between-floating-and-tiling; }

  Mod+O { toggle-window-rule-opacity; }


  // Screenshot utils
  Print { screenshot; }
  Ctrl+Print { screenshot-screen; }
  Alt+Print { screenshot-window; }


  // Applications such as remote-desktop clients and software KVM switches may
  // request that niri stops processing the keyboard shortcuts defined here
  // so they may, for example, forward the key presses as-is to a remote machine.
  // The allow-inhibiting=false property can be applied to other binds as well,
  // which ensures niri always processes them, even when an inhibitor is active.
  Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }


  // Close stuff
  Mod+Q { close-window; }

  Ctrl+Alt+Q allow-inhibiting=false { spawn "sh" "-c" "swaylock -f"; }
  Ctrl+Alt+S allow-inhibiting=false { spawn "sh" "-c" "swaylock -f && systemctl suspend"; }
  Ctrl+Alt+D allow-inhibiting=false { spawn "sh" "-c" "swaylock -f && systemctl hibernate"; }
  Ctrl+Alt+W { spawn "sh" "-c" "loginctl terminate-user $USER"; }
}
